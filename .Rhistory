scale_color_manual(name='', values=c("load"="grey40"), labels=c("Load"))+
labs(y="Generation (TWh)", x=NULL)+
# scale_y_continuous(breaks=seq.py, expand=c(0,0), label=comma)+
# guides(color = guide_legend(order=1), fill = guide_legend(order=2, reverse=TRUE))+
theme(    legend.key =      element_rect(color="grey80", size = 0.8),
legend.key.size = grid::unit(1.0, "lines"),
legend.text =     element_text(size=text.plot),
legend.title =    element_blank(),
#                         text = element_text(family="Arial"),
axis.text =       element_text(size=text.plot/1.2),
axis.text.x =     element_text(angle=-45, hjust=0),
axis.title =      element_text(size=text.plot, face=2),
axis.title.y =    element_text(vjust=1.2),
panel.margin =    unit(1.5, "lines"))+
facet_wrap(~Zone, scales = 'free', ncol=2)
region.load = filter(r.z.load, Type == 'Region')
View(region.load)
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first') %>%
filter(Region != 'BHUTAN')
View(region.load)
region.load = filter(r.z.load, Type == 'Region')
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first') %>%
filter(Zone != 'BHUTAN')
region.load = filter(r.z.load, Type == 'Region')
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first')
View(region.load)
region.load = filter(r.z.load, Type == 'Region')
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first') %>%
filter(Zone != 'BHUTAN')
View(region.load)
region.load = filter(r.z.load, Type == 'Region')
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first')
View(region.load)
region.load = filter(r.z.load, Type == 'Region')
colnames(region.load)[which(colnames(region.load)=='name')]='Region'
region.load$value = region.load$value/1000
region.load$Type = NULL
region.load = region.load %>%
join(region.zone.mapping[,c('Zone', 'Region')], by = 'Region', type='left', match='first') %>%
filter(Zone != 'BHUTAN')
region.load = region.load[complete.cases(region.load),]
ggplot() +
geom_bar(data = region.gen.plot, aes(x = Region, y = TWh, fill=Type, order=as.numeric(Type)), stat='identity', position="stack" ) +
geom_errorbar(aes(x=Region, y=value, ymin=value, ymax=value, color='load'), data=region.load, linetype='longdash', size=0.45)+
scale_fill_manual(values = gen.color, guide = guide_legend(reverse = TRUE))+
scale_color_manual(name='', values=c("load"="grey40"), labels=c("Load"))+
labs(y="Generation (TWh)", x=NULL)+
# scale_y_continuous(breaks=seq.py, expand=c(0,0), label=comma)+
# guides(color = guide_legend(order=1), fill = guide_legend(order=2, reverse=TRUE))+
theme(    legend.key =      element_rect(color="grey80", size = 0.8),
legend.key.size = grid::unit(1.0, "lines"),
legend.text =     element_text(size=text.plot),
legend.title =    element_blank(),
#                         text = element_text(family="Arial"),
axis.text =       element_text(size=text.plot/1.2),
axis.text.x =     element_text(angle=-45, hjust=0),
axis.title =      element_text(size=text.plot, face=2),
axis.title.y =    element_text(vjust=1.2),
panel.margin =    unit(1.5, "lines"))+
facet_wrap(~Zone, scales = 'free', ncol=2)
ggplot() +
geom_bar(data = zone.gen.plot, aes(x = Zone, y = TWh, fill=Type, order=as.numeric(Type)), stat="identity", position="stack" ) +
geom_errorbar(aes(x=name, y=value, ymin=value, ymax=value, color='load'), data=zone.load, linetype='longdash', size=0.45)+
scale_color_manual(name='', values=c("load"="grey40"), labels=c("Load"))+
scale_fill_manual(values = gen.color, guide = guide_legend(reverse = TRUE))+
labs(y="Generation (TWh)", x=NULL)+
# scale_y_continuous(breaks=seq.py, expand=c(0,0), label=comma)+
guides(color = guide_legend(order=1), fill = guide_legend(order=2, reverse=TRUE))+
theme(    legend.key =      element_rect(color="grey80", size = 0.8),
legend.key.size = grid::unit(1.0, "lines"),
legend.text =     element_text(size=text.plot),
legend.title =    element_blank(),
#                         text = element_text(family="Arial"),
axis.text =       element_text(size=text.plot/1.2),
# axis.text.x =   element_text(face=2),
axis.title =      element_text(size=text.plot, face=2),
axis.title.y =    element_text(vjust=1.2),
panel.margin =    unit(1.5, "lines"))
ggplot() +
geom_bar(data = region.gen.plot, aes(x = Region, y = TWh, fill=Type, order=as.numeric(Type)), stat='identity', position="stack" ) +
geom_errorbar(aes(x=Region, y=value, ymin=value, ymax=value, color='load'), data=region.load, linetype='longdash', size=0.45)+
scale_fill_manual(values = gen.color, guide = guide_legend(reverse = TRUE))+
scale_color_manual(name='', values=c("load"="grey40"), labels=c("Load"))+
labs(y="Generation (TWh)", x=NULL)+
# scale_y_continuous(breaks=seq.py, expand=c(0,0), label=comma)+
guides(color = guide_legend(order=1), fill = guide_legend(order=2, reverse=TRUE))+
theme(    legend.key =      element_rect(color="grey80", size = 0.8),
legend.key.size = grid::unit(1.0, "lines"),
legend.text =     element_text(size=text.plot),
legend.title =    element_blank(),
#                         text = element_text(family="Arial"),
axis.text =       element_text(size=text.plot/1.2),
axis.text.x =     element_text(angle=-45, hjust=0),
axis.title =      element_text(size=text.plot, face=2),
axis.title.y =    element_text(vjust=1.2),
panel.margin =    unit(1.5, "lines"))+
facet_wrap(~Zone, scales = 'free', ncol=2)
region.load = filter(r.z.load, Type == 'Region')
View(region.load)
View(r.z.load)
r.name = KERALA
r.name = 'KERALA'
region.load = filter(r.z.load, name == r.name)
View(region.load)
View(region.load)
View(region.load)
region.load = filter(r.z.load, name == r.name)
region.load$value = region.load$value/1000
plot.data.sum = ungroup(plot.data) %>%
dplyr::summarise(TWh = sum(TWh)) #change GWh generation to TWh
plot.data = region.gen.plot %>%
filter(Region == r.name)
plot.data.sum = ungroup(plot.data) %>%
dplyr::summarise(TWh = sum(TWh)) #change GWh generation to TWh
View(plot.data)
View(plot.data.sum)
View(region.load)
plot.data.sum = ungroup(plot.data) %>%
dplyr::summarise(TWh = sum(TWh)) #change GWh generation to TWh
View(plot.data.sum)
View(region.load)
plot.data.sum = ungroup(plot.data) %>%
dplyr::summarise(TWh = sum(TWh)) #change GWh generation to TWh
if (region.load$value>plot.data.sum) {
plot.data.sum$TWh = region.load$value
}
View(plot.data.sum)
daily.curt = tryCatch( daily_curtailment(db), error = function(cond) { return('ERROR')})
View(daily.curt)
rm(list = ls())
source('query_functions.R')
setwd('C:/Users/moconnel/documents/PLEXOS-Vis/')
source('query_functions.R')
source('setup_plexosAnalysis.R')
database = db
c.data = query_interval(database, 'Generator', prop = c('Generation', 'Available Capacity'), columns = c('category', 'name') )
head(c.data)
c.gen = c.data %>%
filter(property == 'Generation') %>%
join(category2type, by = 'category') %>%
select(time, Type, value) %>%
dcast(time ~ Type, value.var = 'value', fun.aggregate = sum) %>%
subset(select = re.types)
View(c.gen)
c.avail = c.data %>%
filter(property == 'Available Capacity') %>%
join(category2type, by = 'category') %>%
select(time, Type, value) %>%
dcast(time ~ Type, sum) %>%
subset(select = re.types)
View(c.avail)
View(c.gen)
c.gen = filter(c.data, property == 'Generation')
c.avail = filter(c.data, property == 'Available Capacity')
View(c.avail)
View(c.gen)
zone.gen = tryCatch( region_zone_gen(db), error = function(cond) { return('ERROR') } )
View(zone.gen)
zone.gen = select(zone.gen, Region, Zone, Type, GWh=value)
zone.gen$Type = factor(zone.gen$Type, levels = gen.order)
zone.gen.plot = zone.gen %>%
group_by(Type, Zone) %>%
dplyr::summarise(TWh = sum(GWh)/1000) %>%
filter(Zone != 'BHUTAN')
View(zone.gen.plot)
zone.gen.plot = zone.gen %>%
group_by(Type, Zone, Region) %>%
dplyr::summarise(TWh = sum(GWh)/1000) %>%
filter(Zone != 'BHUTAN')
View(zone.gen.plot)
View(zone.gen)
zone.gen.table = zone.gen %>%
dcast(Type ~ Region+Zone, value.var = GWh)
View(zone.gen)
zone.gen.table = zone.gen %>%
dcast(Type ~ Region+Zone, value.var = 'GWh')
zone.gen.table = zone.gen %>%
dcast(Type ~ Region+Zone, value.var = 'GWh', fun.aggregate = sum)
View(zone.gen.table)
zone.gen.table = zone.gen %>%
dcast(Region+Zone~Type, value.var = 'GWh', fun.aggregate = sum)
View(zone.gen.table)
dcast(Zone+Region~Type, value.var = 'GWh', fun.aggregate = sum)
zone.gen.table = zone.gen %>%
dcast(Zone+Region~Type, value.var = 'GWh', fun.aggregate = sum)
View(zone.gen.table)
master.script.dir <- 'C:/Users/moconnel/documents/PLEXOS-Vis'
master.script.dir <- 'C:/Users/moconnel/documents/PLEXOS-Vis'
input.csv = '//plexossql/data/moconnel/gtg/html/input_data.csv'
source(file.path(master.script.dir,'query_functions.R'))
source(file.path(master.script.dir,'setup_plexosAnalysis.R'))
render(file.path(master.script.dir,'HTML_output.Rmd'))
View(region_zone_load)
View(region_zone_load)
View(region_zone_load)
source(file.path(master.script.dir,'query_functions.R'))
source(file.path(master.script.dir,'setup_plexosAnalysis.R'))
master.script.dir <- 'PLEXOS-Vis'
input.csv = '//plexossql/data/moconnel/gtg/html/input_data.csv'
source(file.path(master.script.dir,'query_functions.R'))
setwd(..)
setwd(c:/users/moconnel/documents)
setwd(c:users/moconnel/documents)
setwd(c:/users/moconnel/documents)
setwd(c/users/moconnel/documents)
setwd(C:/users/moconnel/documents)
setwd(C://users/moconnel/documents)
getwd()
setwd('C:/users/moconnel/documents')
master.script.dir <- 'PLEXOS-Vis'
input.csv = '//plexossql/data/moconnel/gtg/html/input_data.csv'
source(file.path(master.script.dir,'query_functions.R'))
source(file.path(master.script.dir,'setup_plexosAnalysis.R'))
output.dir = file.path(master.scripts.dir(na.exclude(inputs$Fig.Path)))
output.dir = file.path(master.scripts.dir,(na.exclude(inputs$Fig.Path)))
output.dir = file.path(master.script.dir,(na.exclude(inputs$Fig.Path)))
render(input=file.path(master.script.dir,'HTML_output.Rmd'), c("html_document"), output_dir = output.dir)
install.packages('markdown')
install.packages("markdown")
render(input=file.path(master.script.dir,'HTML_output.Rmd'), c("html_document"), output_dir = output.dir)
if (Sys.info()[[1]]=="Windows"){
source('//plexossql/Data/moconnel/ergis/ergis_hpc_rtools/hpc_summary_scripts/hpc_setup_summary_scripts.R')
}else{
source('/projects/PLEXOSMODEL/ERGIS/Rfiles/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
}
# this function is from source ('HPC_setup_summary_scripts.R)
out=hpc_setup()
# 'out' is assigned according to the outputs from  the above function
for (k in 1:length(out)){
assign(names(out[k]), out[[k]])
}
cl <- makeCluster(num.nodes)
registerDoParallel(cl)
gen_capacity = foreach (k=c(1:length(key.weeks)), .combine=rbind, .packages=c('reshape2', 'lubridate', 'plyr','dplyr','RSQLite', 'data.table')) %dopar% {
scen.split=unlist(strsplit(key.weeks[k], split="/"))
partit.loop = which(lapply(partitions, function(x) which(grepl(x, key.weeks[k])))>0)
##############Curtailment
gen.loop = tbl(src_sqlite(key.weeks[k]), sql("SELECT * FROM Generation_by_category")) %>%
select(time, category, zone, value) %>%
collect()
gen.loop$time = ymd_hms(gen.loop$time, tz="UTC")
VG = gen.loop %>%
filter(category=="NREL Wind"| category=="NREL Solar") %>%
group_by(zone, category, time) %>%
dplyr::summarise(generation=sum(value))
VG$time = ymd_hms(VG$time, tz = "UTC")
av.cap = tbl(src_sqlite(key.weeks[k]), sql("SELECT * FROM Available_capacity_by_category")) %>%
filter(category=="NREL Wind"| category=="NREL Solar") %>%
group_by(zone, category, time) %>%
dplyr::summarise(avail.cap=sum(value)) %>%
collect()
av.cap$time=ymd_hms(av.cap$time, tz="UTC")
curt = left_join(av.cap, VG, by=c("zone", "time", "category"))
tz(curt$time) = "UTC"
curt$generation[is.na(curt$generation)]=0
gen.curt = curt %>%
mutate(value = avail.cap-generation) %>%
group_by(time, zone) %>%
dplyr::summarise(value=sum(value)) %>%
select(time, zone, value)
gen.curt$category = "Curtailment"
###############
# get load
load=tbl(src_sqlite(key.weeks[k]), sql("SELECT * FROM Zone_Load")) %>% collect()
load = expand_time(load, key.weeks[k])
load$Type = "Load"
load = load %>%
group_by(name, time) %>%
dplyr::summarise(value = sum(value)) %>%
select(time, name, value)
load = plyr::rename(load, c("name" = "zone"))
load$category = "Load"
class(load) = class(gen.curt)
load = ungroup(load)
#################
gen.loop = rbind(gen.loop, gen.curt)
gen.loop = rbind(gen.loop, load)
# don't take out overlap days for first run (month or week)
wk = as.numeric(substr(partitions[partit.loop], 2, 4))
if (!is.null(overlap) && wk>1){
gen.loop=slice.off.overlap(gen.loop, overlap)
}
# Remove canadian regions if set (beginning of loop)
#if (include.canada == FALSE){
# gen.loop = remove.canada(gen.loop)
#}
Reg.gen = left_join(gen.loop, category2type, by="category")
Reg.gen = Reg.gen %>%
group_by(Type, time, zone) %>%
summarise(value=sum(value))
#tack on a column with the scenario name, from the setup
Reg.gen$scenario = scen.split[grep("DA|4HA|RT", scen.split)][1]
# add a column of partition to make distiguishing times in R plotting easier
Reg.gen$partition = rep(partit.loop)
Reg.gen
} #gen_capacity
stopCluster(cl)
comment(gen_capacity) = c(paste("Dispatch_stack_data: ", model.folder, prefix, " --- partitions = ", paste(partitions, collapse=","), sep=""))
assign(paste0(prefix, "dispatch_stack_data"), gen_capacity)
save(list=paste0(prefix, "dispatch_stack_data"), file=paste0(model.folder, prefix, "dispatch_stack_data.RData"))
paste0(model.folder, prefix, "dispatch_stack_data.RData")
if (Sys.info()[[1]]=="Windows"){
# source('//plexossql/Data/ERGIS/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
source('//plexossql/Data/moconnel/Ergis/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
}else{
source('/projects/PLEXOSMODEL/ERGIS/Rfiles/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
}
# this function is from source ('HPC_setup_summary_scripts.R)
out=hpc_setup()
# 'out' is assigned according to the outputs from  the above function
for (k in 1:length(out)){
assign(names(out[k]), out[[k]])
}
key.weeks.da = gsub(prefix, "a_DA_", key.weeks) #prefix is part of the output from hpc_setup and is input when using the HPC (usually "c_RT_")
key.weeks = c(key.weeks, key.weeks.da) # this adds all the DA runs from the same partitions of the key.weeks
# this is needed to help match the scenarios b/w DA and RT. do not change regardless of final names used
scen.list=c("loVG", "SRPS", "N30P", "R30P")
# periods to be selected, this will need to be changed based on 73 partitions in 2015 runs
sel.periods = data.frame(Period.type = c("High VG", "High Load", "High Net Load Ramp"), partition = c("_027", "_043", "_066"))
cl <- makeCluster(num.nodes)
registerDoParallel(cl)
q.df = foreach(k=1:length(scen.list), .packages=c('lubridate','reshape','reshape2','data.table','RSQLite','plyr','dplyr'), .combine=rbind) %dopar% {
#this needs to be manually set-up so that the paritions line up with the date's
scen = subset(key.weeks, grepl(scen.list[k], key.weeks))
all.dbs = subset(scen, grepl(".db",scen) & grepl(paste(sel.periods$partition, collapse="|"), scen))
RT.DA.list = list()
for (i in 1:nrow(sel.periods)){
the.db = subset(all.dbs, grepl(sel.periods[i,]$partition, all.dbs))
RT.gen = tbl(src_sqlite(subset(the.db, grepl("c_RT", the.db))), sql("SELECT * FROM Generation_by_category")) %>%
filter(category=="CC" | category=="Coal_ST" | category=="Gas_GT" | category=="Gas_ST" | category == 'NREL Wind' | category == 'NREL Solar') %>%
group_by(time, zone, category) %>%
summarise(RT.online.capacity=sum(online.capacity), RT.generation=sum(value)) %>%
collect()
RT.gen$time = ymd_hms(RT.gen$time)
DA.gen = tbl(src_sqlite(subset(the.db, grepl("a_DA", the.db))), sql("SELECT * FROM Generation_by_category")) %>%
filter(category=="CC" | category=="Coal_ST" | category=="Gas_GT" | category=="Gas_ST") %>%
group_by(time, zone, category) %>%
summarise(DA.online.capacity=sum(online.capacity)) %>%
collect()
DA.gen$time = ymd_hms(DA.gen$time)
# find wind and solar capacity
RT.av.cap = tbl(src_sqlite(subset(the.db, grepl("c_RT", the.db))), sql("SELECT * FROM Available_capacity_by_category")) %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
group_by(time, zone, category) %>%
summarise(RT.online.capacity=sum(value)) %>%
collect()
RT.av.cap$time = ymd_hms(RT.av.cap$time)
RT.VG = RT.gen %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
select(time, zone, category, RT.generation)
RT.VG = left_join(RT.VG, RT.av.cap, by=c('time', 'zone', 'category'))
#####################################################
# This contains all RT data for plot
RT.ALL = rbind(filter(RT.gen, category!='NREL Wind', category!='NREL Solar'), RT.VG)
#####################################################
DA.av.cap = tbl(src_sqlite(subset(the.db, grepl("a_DA", the.db))), sql("SELECT * FROM Available_capacity_by_category")) %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
group_by(time, zone, category) %>%
summarise(DA.online.capacity=sum(value)) %>%
collect()
DA.av.cap$time = ymd_hms(DA.av.cap$time)
#########################################################
# contains all DA data for plot
DA.av.cap = rbind_all(list(DA.av.cap, DA.gen))
DA.av.cap$Datetime = ceiling_date(DA.av.cap$time, unit=c('hour'))
#########################################################
DA.av.cap = DA.av.cap %>% select(Datetime, zone, category, DA.online.capacity)
RT.ALL$Datetime = floor_date(RT.ALL$time, unit = c("hour"))
RT.DA = left_join(RT.ALL, DA.av.cap, by=c('Datetime', 'zone', 'category'))
RT.DA$DA.online.capacity[is.na(RT.DA$DA.online.capacity)]=0
RT.DA = left_join(RT.DA, category2type, by='category')
RT.DA = RT.DA %>%
group_by(time, Type, zone) %>%
dplyr::summarise(RT.online.capacity=sum(RT.online.capacity), RT.generation=sum(RT.generation), DA.online.capacity=sum(DA.online.capacity))
RT.DA$scenario = scen.list[k]
RT.DA$Period.type = sel.periods[i,]$Period.type
RT.DA.list[[i]]=RT.DA
}
out.list = do.call(rbind, RT.DA.list)
} # for loop with k
stopCluster(cl)
# Saving df ----
comment(q.df) = c(paste("All pieces necessary to make DA and RT committment and dispatch plots: ", model.folder, prefix, " --- paritions = ", paste(partitions, collapse=","), sep=""))
assign(paste0(prefix, "DA_RT_committment_dispatch"), q.df)
save(list=paste0(prefix, "DA_RT_committment_dispatch"), file=paste0(model.folder, prefix, "DA_RT_committment_dispatch.RData"))
if (Sys.info()[[1]]=="Windows"){
# source('//plexossql/Data/ERGIS/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
source('//plexossql/Data/moconnel/Ergis/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
}else{
source('/projects/PLEXOSMODEL/ERGIS/Rfiles/ergis_HPC_Rtools/HPC_summary_scripts/HPC_setup_summary_scripts.R')
}
# this function is from source ('HPC_setup_summary_scripts.R)
out=hpc_setup()
# 'out' is assigned according to the outputs from  the above function
for (k in 1:length(out)){
assign(names(out[k]), out[[k]])
}
key.weeks.da = gsub(prefix, "a_DA_", key.weeks) #prefix is part of the output from hpc_setup and is input when using the HPC (usually "c_RT_")
key.weeks = c(key.weeks, key.weeks.da) # this adds all the DA runs from the same partitions of the key.weeks
# this is needed to help match the scenarios b/w DA and RT. do not change regardless of final names used
scen.list=c("loVG", "SRPS", "N30P", "R30P")
# periods to be selected, this will need to be changed based on 73 partitions in 2015 runs
sel.periods = data.frame(Period.type = c("High VG", "High Load", "High Net Load Ramp"), partition = c("_027", "_043", "_066"))
cl <- makeCluster(num.nodes)
registerDoParallel(cl)
q.df = foreach(k=1:length(scen.list), .packages=c('lubridate','reshape','reshape2','data.table','RSQLite','plyr','dplyr'), .combine=rbind) %dopar% {
#this needs to be manually set-up so that the paritions line up with the date's
scen = subset(key.weeks, grepl(scen.list[k], key.weeks))
all.dbs = subset(scen, grepl(".db",scen) & grepl(paste(sel.periods$partition, collapse="|"), scen))
RT.DA.list = list()
for (i in 1:nrow(sel.periods)){
the.db = subset(all.dbs, grepl(sel.periods[i,]$partition, all.dbs))
RT.gen = tbl(src_sqlite(subset(the.db, grepl("c_RT", the.db))), sql("SELECT * FROM Generation_by_category")) %>%
filter(category=="CC" | category=="Coal_ST" | category=="Gas_GT" | category=="Gas_ST" | category == 'NREL Wind' | category == 'NREL Solar' | category == 'Hydro') %>%
group_by(time, zone, category) %>%
summarise(RT.online.capacity=sum(online.capacity), RT.generation=sum(value)) %>%
collect()
RT.gen$time = ymd_hms(RT.gen$time)
DA.gen = tbl(src_sqlite(subset(the.db, grepl("a_DA", the.db))), sql("SELECT * FROM Generation_by_category")) %>%
filter(category=="CC" | category=="Coal_ST" | category=="Gas_GT" | category=="Gas_ST" | category == 'Hydro') %>%
group_by(time, zone, category) %>%
summarise(DA.online.capacity=sum(online.capacity)) %>%
collect()
DA.gen$time = ymd_hms(DA.gen$time)
# find wind and solar capacity
RT.av.cap = tbl(src_sqlite(subset(the.db, grepl("c_RT", the.db))), sql("SELECT * FROM Available_capacity_by_category")) %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
group_by(time, zone, category) %>%
summarise(RT.online.capacity=sum(value)) %>%
collect()
RT.av.cap$time = ymd_hms(RT.av.cap$time)
RT.VG = RT.gen %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
select(time, zone, category, RT.generation)
RT.VG = left_join(RT.VG, RT.av.cap, by=c('time', 'zone', 'category'))
#####################################################
# This contains all RT data for plot
RT.ALL = rbind(filter(RT.gen, category!='NREL Wind', category!='NREL Solar'), RT.VG)
#####################################################
DA.av.cap = tbl(src_sqlite(subset(the.db, grepl("a_DA", the.db))), sql("SELECT * FROM Available_capacity_by_category")) %>%
filter(category == 'NREL Wind' | category == 'NREL Solar') %>%
group_by(time, zone, category) %>%
summarise(DA.online.capacity=sum(value)) %>%
collect()
DA.av.cap$time = ymd_hms(DA.av.cap$time)
#########################################################
# contains all DA data for plot
DA.av.cap = rbind_all(list(DA.av.cap, DA.gen))
DA.av.cap$Datetime = ceiling_date(DA.av.cap$time, unit=c('hour'))
#########################################################
DA.av.cap = DA.av.cap %>% select(Datetime, zone, category, DA.online.capacity)
RT.ALL$Datetime = floor_date(RT.ALL$time, unit = c("hour"))
RT.DA = left_join(RT.ALL, DA.av.cap, by=c('Datetime', 'zone', 'category'))
RT.DA$DA.online.capacity[is.na(RT.DA$DA.online.capacity)]=0
RT.DA = left_join(RT.DA, category2type, by='category')
RT.DA = RT.DA %>%
group_by(time, Type, zone) %>%
dplyr::summarise(RT.online.capacity=sum(RT.online.capacity), RT.generation=sum(RT.generation), DA.online.capacity=sum(DA.online.capacity))
RT.DA$scenario = scen.list[k]
RT.DA$Period.type = sel.periods[i,]$Period.type
RT.DA.list[[i]]=RT.DA
}
out.list = do.call(rbind, RT.DA.list)
} # for loop with k
stopCluster(cl)
# Saving df ----
comment(q.df) = c(paste("All pieces necessary to make DA and RT committment and dispatch plots: ", model.folder, prefix, " --- paritions = ", paste(partitions, collapse=","), sep=""))
assign(paste0(prefix, "DA_RT_committment_dispatch_hydro"), q.df)
save(list=paste0(prefix, "DA_RT_committment_dispatch_hydro"), file=paste0(model.folder, prefix, "DA_RT_committment_dispatch_hydro.RData"))
key.period.dispatch.total |
key.period.dispatch.region |
key.period.dispatch.zone |
yearly.curtailment |
daily.curtailment
if(5 %in% run.sections)  {key.period.dispatch.total=TRUE}       else {key.period.dispatch.total=FALSE}
if(6 %in% run.sections)  {key.period.dispatch.region=TRUE}      else {key.period.dispatch.region=FALSE}
if(7 %in% run.sections)  {key.period.dispatch.zone=TRUE}        else {key.period.dispatch.zone=FALSE}
if(8 %in% run.sections)  {yearly.curtailment=TRUE}              else {yearly.curtailment=FALSE}
if(9 %in% run.sections)  {daily.curtailment=TRUE}               else {daily.curtailment=FALSE}
if(10 %in% run.sections) {annual.generation.table=TRUE}         else {annual.generation.table=FALSE}
source(file.path('setup_plexosAnalysis.R'))
setwd('C:/Users/moconnel/documents/PLEXOS-Vis')
master.script.dir <- 'PLEXOS-Vis'
input.csv = '//plexossql/data/moconnel/CU/html/input_data.csv'
# Sourcing the setup file and required functions
source(file.path('query_functions.R'))
source(file.path('setup_plexosAnalysis.R'))
key.period.dispatch.total |
key.period.dispatch.region |
key.period.dispatch.zone |
yearly.curtailment |
daily.curtailment
